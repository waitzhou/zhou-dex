package com.zhexinit.yixiaotong.base;

import android.app.Application;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.support.annotation.NonNull;
import android.support.multidex.MultiDex;
import android.support.multidex.MultiDexApplication;

import com.scwang.smartrefresh.header.WaterDropHeader;
import com.scwang.smartrefresh.layout.SmartRefreshLayout;
import com.scwang.smartrefresh.layout.api.DefaultRefreshFooterCreator;
import com.scwang.smartrefresh.layout.api.DefaultRefreshHeaderCreator;
import com.scwang.smartrefresh.layout.api.DefaultRefreshInitializer;
import com.scwang.smartrefresh.layout.api.RefreshFooter;
import com.scwang.smartrefresh.layout.api.RefreshHeader;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.footer.ClassicsFooter;
import com.tencent.cos.xml.CosXmlServiceConfig;
import com.tencent.cos.xml.CosXmlSimpleService;
import com.tencent.qcloud.core.auth.QCloudCredentialProvider;
import com.tencent.qcloud.core.auth.SessionCredentialProvider;
import com.tencent.qcloud.core.http.HttpRequest;
import com.zhexinit.yixiaotong.R;
import com.zhexinit.yixiaotong.db.DaoMaster;
import com.zhexinit.yixiaotong.db.DaoSession;
import com.zhexinit.yixiaotong.widget.YixiaotongRefreshHeader;


import java.net.MalformedURLException;
import java.net.URL;

import cn.jpush.android.api.JPushInterface;

/**
 * 智慧校园application
 */
public class SmartCampusApp extends MultiDexApplication {
    public static Application context = null;
    public static CosXmlSimpleService cosXmlService;
    private DaoSession mDaoSession;
    @Override
    protected void attachBaseContext(Context base) {
        super.attachBaseContext(base);
        MultiDex.install(this);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        context = this;
        initTencentCos();
        initGreenDao();
        initJPush();

    }

    /**
     * 初始化极光
     * */
    private void initJPush() {
        JPushInterface.setDebugMode(true);
        JPushInterface.init(this);
    }

    /**
     * 初始化greenDao
     */
    private void initGreenDao() {
        DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, "petbuddy.db");
        SQLiteDatabase database = helper.getWritableDatabase();
        DaoMaster daoMaster = new DaoMaster(database);
        mDaoSession = daoMaster.newSession();
    }

    /**
     * 获取dao对象
     */
    public DaoSession getDaoSession() {
        return mDaoSession;
    }

    /**
     * 初始化上传文件图片，腾讯cos
     */
    private void initTencentCos() {
        CosXmlServiceConfig cosXmlServiceConfig = new CosXmlServiceConfig.Builder()
                .setAppidAndRegion("1253442986", "ap-shanghai")
                .setDebuggable(true)
                .builder();

        URL url = null;

        try {
            url = new URL(Constant.IMG_TOKEN_URL);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        /**
         * 初始化 {@link QCloudCredentialProvider} 对象，来给 SDK 提供临时密钥。
         */
        QCloudCredentialProvider credentialProvider = new SessionCredentialProvider(new HttpRequest.Builder<String>()
                .url(url)
                /**
                 * 注意这里的 HTTP method 为 GET，请根据您自己密钥服务的发布方式进行修改
                 */
                .method("GET")
                .build());

        cosXmlService = new CosXmlSimpleService(this, cosXmlServiceConfig, credentialProvider);

//        //创建 CosXmlServiceConfig 对象，根据需要修改默认的配置参数
//        CosXmlServiceConfig serviceConfig = new CosXmlServiceConfig.Builder()
//                .setAppidAndRegion("1253442986", "ap-shanghai")
//                .setDebuggable(true)
//                .builder();
//
//        //创建获取签名类(请参考下面的生成签名示例，或者参考 sdk中提供的ShortTimeCredentialProvider类）
//        MyCredentialProvider localCredentialProvider=new MyCredentialProvider(this);
//        //创建获取签名类(请参考下面的生成签名示例，或者参考 sdk中提供的ShortTimeCredentialProvider类）
//        LocalCredentialProvider localCredentialProvider2 = new LocalCredentialProvider("AKIDMD3lHJf5kg3x5Xu61GyIaaC82NwJwktU", "6eVO8e49HGvOYl85lZzguOaoPWlGzETO", 600);
//        //创建 CosXmlService 对象，实现对象存储服务各项操作.
//        cosXmlService = new CosXmlSimpleService(context, serviceConfig, localCredentialProvider2);
    }


    /**
     * 刷新和分页用到的工具类
     * static 代码段可以防止内存泄露
     * */
    static {
        //设置全局的Header构建器
        SmartRefreshLayout.setDefaultRefreshInitializer(new DefaultRefreshInitializer() {
            @Override
            public void initialize(@NonNull Context context, @NonNull RefreshLayout layout) {

            }
        });
        SmartRefreshLayout.setDefaultRefreshHeaderCreator(new DefaultRefreshHeaderCreator() {
            @NonNull
            @Override
            public RefreshHeader createRefreshHeader(@NonNull Context context, @NonNull RefreshLayout layout) {
                layout.setPrimaryColorsId(R.color.theme_center_color, R.color.theme_center_color);//全局设置主题颜色
                return new YixiaotongRefreshHeader(context);
                //return new WaterDropHeader(context);//.setTimeFormat(new DynamicTimeFormat("更新于 %s"));//指定为经典Header，默认是 贝塞尔雷达Header
            }
        });
        //设置全局的Footer构建器
        SmartRefreshLayout.setDefaultRefreshFooterCreator(new DefaultRefreshFooterCreator() {
            @NonNull
            @Override
            public RefreshFooter createRefreshFooter(@NonNull Context context, @NonNull RefreshLayout layout) {
                //指定为经典Footer，默认是 BallPulseFooter
                return new ClassicsFooter(context).setDrawableSize(20);
            }
        });
    }
}
